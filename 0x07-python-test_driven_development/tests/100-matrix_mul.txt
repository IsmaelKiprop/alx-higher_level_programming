==========================================
Tests for matrix_mul in 100-matrix_mul.py
==========================================

This is a set of test cases for the module matrix_mul - a function
which performs matrix multiplication.

:: Import module

	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Tests
=====

Both arguments must be matrices. Row length in each matrix must be uniform
throughout that given matrix. Matrices may not be empty or have empty rows.
All matrix elements must be integers or floats. In order to perform matrix
multiplication, the number of columns in the first matrix must match the
number of rows in the second.

:: Non-integer/non-float elements

	>>> matrix_mul([[1, 2], [0, 9]], [[4, 5], [6, 'six']])
	Traceback (most recent call last):
	TypeError: m_b should contain only integers or floats

	>>> matrix_mul([[1.2, 1.5], [5.6, None]], [[1, 2], [0, 9]])
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

:: Non-uniform row length

	>>> matrix_mul([[1, 2, 3], [4, 5]], [[7, 8], [2]])
	Traceback (most recent call last):
	TypeError: each row of m_a must be of the same size

	>>> matrix_mul([[1, 3], [4, 5]], [[7, 8], [2]])
	Traceback (most recent call last):
	TypeError: each row of m_b must be of the same size

:: Empty matrix

	>>> matrix_mul([[]], [[7, 8], [2]])
	Traceback (most recent call last):
	ValueError: m_a can't be empty

	>>> matrix_mul([[1, 2], [0, 9]], [])
	Traceback (most recent call last):
	ValueError: m_b can't be empty

:: Non-lists

	>>> matrix_mul('666', [[1, 2], [0, 9]])
	Traceback (most recent call last):
	TypeError: m_a must be a list

	>>> matrix_mul([[1, 2], [0, 9.4]], {'key': 'value'})
	Traceback (most recent call last):
	TypeError: m_b must be a list

A minimum of two arguments must be provided. Otherwise, a TypeError is raised.

::

    >>> print(matrix_mul([[2, 3], [7, 9]])) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 1 required positional argument: 
    'm_b'

::

    >>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

::

    >>> print(matrix_mul([[1, 2]], [3, 4]))
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

::

    >>> print(matrix_mul([1, 2], [3, 4]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

::
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    [[7, 10], [15, 22]]
